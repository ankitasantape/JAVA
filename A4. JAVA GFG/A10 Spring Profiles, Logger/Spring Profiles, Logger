
log4j - use to print the logs in certain passion 

What's that time?
In the 1st columns you can see, date and time, this date and time would be local date and time of your server

What would be the local time of your server ? 
It would be IST becoz currently it's( server) running in Indian time zone.
If you deploy this server or if you put this jar on some virtual machine and that virtual machine is located in US region,
What would be the time? It would be UTC not an IST time. It would be a different time zone.

So, 1st column basically contains your time, 
2nd column contains your logging level (INFO, DEBUG, ) (Will discuss this later how it helps in debugging, how it print certain types of logs ),
3rd column, contains processId  PID 85779
4th column, contains main thread [ main]
5th column, contains className inside this, this log is printed | c.e.d.DemoSpringBootApplication: Starting DemoSpringBootApplication using Java 

If you try to search : initializing Servlet 'dispatcherServlet' inside DispatcherServlet.class 
 
 
Note:
# for println statement, the statement is print just like that -
# this is not a logging format this is just a simple sysout statement
# it doesn't give you much information like when this log was printed , in which thread it is printed, in which class it is printed 
   System.out.println("Inside main method"); 
   o/p: Inside main method 
   
- If you want to print sysout statement just like it has printed in log4j then you can do -
We'll initialize logger object and this Logger object is coming from slf4j library 
and this LoggerFactory is coming from the same jar/library.
So here, I'm just getting an object and getLogger() is just a static function, it returns a logger object and inside this function we're passing a className
why we're providing this className becoz, whenever whatever we want to print, if you want to see name of the class here(in log statement) then it would be useful    

Logger logger = LoggerFactory.getLogger(DemoSpringBootApplication.class);

so, instead of using System.out.println("Inside main method");  you can use logger.info("Inside main method") inside main method 

So, here you can see that it is now printed in the similar main thread, same processId, same type of log 
2024-03-30T18:39:53.371+05:30  INFO 19844 --- [           main] c.e.m.MajorProjectApplication            : Inside main method


# The format of logs for log4j is like this -

 2024-03-30T18:39:53.371+05:30  INFO 19844 --- [           main] c.e.m.MajorProjectApplication            : Starting MajorProjectApplication using Java 19.0.1 with PID 19844 (C:\Users\ASUS SSD\JAVA\A4. JAVA GFG\major-project\target\classes started by ASUS SSD in C:\Users\ASUS SSD\JAVA\A4. JAVA GFG\major-project)
 
 
# Why you should not use system.out.println() ?
1. It doesn't give much clarity, if you want to debug something it'll not help you in a good passion 
  let's suppose System.out.println("Inside main method") this log is from some other class, how will you detect whether it is coming from this class or some other class
  
2. All the sysout statements are blocking statements
What does that means? Once this log is printed, it's slightly slower that your logger statement. 
If you need more information not just your message more than that. Then you can use this logger level.

 
### what are the different logging level and why there're developed?
Logging levels - on the basis of severe
There is inverse relation b/w severity and count
 
1. ERROR - 
2. WARN
3. INFO 
4. DEBUG 
5. TRACE - will be least severe and mx in number 

# How many logs would you expect? 


public class DemoSpringBootApplication {
  Logger logger = LoggerFactory.getLogger(DemoSpringBootApplication.class);
	 
  public static void main(String[] args){ 
	SpringApplication.run(DemoSpringBootApplication.class, args);
	logger.error("Error log"); - will be most severe and minimum in number (whenever there is any error)
	logger.warn("Warn log"); - whenever there is some kind of error which is less severe, code is going to an unexpected block, edge cases which are not handled 
	logger.info("Info log"); - Logs which help you in debugging your application logic
	logger.debug("Debug log"); - Logs which help you in debugging your application logic + spring boot's internal working 
	logger.trace("Trace log"); - will be least severe and maximum in number (whatever you want to print even the tiniest of the things for ex. a heartbeat of an embedded server like I'm listening on this port, 
	
	I'm ready to accept connections this logs are not helpful for us as a developer going forward becoz we don't want to print this logs otherwise it will make your log file as bulky file. 
	The number of logs that will be printed in a trace level will be a lot higher than what would you expect to have in your log file. 
    So, that's what you shouldn't print it in your production environment or env which is accepting customer requirement )
  }
}


Ans: You will see 3 logs those are - Error log, Warn log, Info log 

Here debug and trace didn't print, why?
Becoz default log level is INFO. 
So, there is a capability in spring boot that you can set logging level as per your need.
So, Trace logs are not severe than Debug and Debug is not severe than INFO.
That's why it's not printed.

# If you want to print all the type of DEBUG logs in your application. In your application.properties 
similar to the server.port there is one more property which is 
logging.level.root=debug 
  
This property will print all the logs from debug, info, warn to error will print except trace.
becoz it comes at the lowest level.

And bydefault this value is info.
logging.level.root=info



# We can also annotate the class with slf4j rather than creating the logger object 

- You can use annotations like @CustomLog or @slf4j 
- Are log4j and slf4j are different libraries, right? 
  Kind of yes and no both. Slf4j is kind of a mediator library. Internally it requires
  some library for ex. log4j or some other logging library to print the logs in certain format.
  In our dependency you can see, in springboot starter login, it depends on log4j-to-slf4j
  and slf4j-jul-to-slf4j:1.7.36

   Refer - https://stackoverflow.com/questions/39562965/what-is-the-difference-between-log4j-slf4j-and-logback 
  
# log file rotation property in springboot  
  
  Refer - https://stackoverflow.com/questions/57312048/springboot-how-to-rotate-log-files-on-the-server-restart

# In logging.level.root=error 
 for this line only one line will be printed, other logs were of INFO log that's why it was printing more informations.
 

# All the logs which are printed  


# ionShutdownHook means? 
  This is also a thread. Functionality or whenever u stop ur application and before that some piece of code is execute.
  That's executed in a background thread (ionShutdownHook). 
  So basically it stops some kind of engine which are listening to the request. It basically does something before the actual server is stopping.
  And it's done this thread(ionShutdownHook) and not in the main thread. why? Becoz the 'main' thread is getting stopped. It is similar to garbage collector in Java.
  When u r running ur application garbage collector works and when u stop ur application garbage collector wn't work.
  Becoz, it's a daemon thread. So, similar to that this ionShutdownHook might be a daemon thread which clears some kind of memory, when ur server is stopped.
  
# U r launching ur application on main thread but internally multiple other threads can be created by embedded server becoz that's the entity which is running.
  U r not creating threads by ur own but ur embedded server is creating it internally for handling any request.   
  Again, the number of threads it can create limited by ur hardware.  


# Let suppose I'm running this code on octa core machine, so I can handle simultaneouly/parallely 8 requests.
  But, if you think about, the virtual machines or actual servers which run on the actual cloud, they would be having 
  300 or 400 threads or let's say 1000 threads that means that 1000 concurrent concurrent requests are served by those INFRA(server) 
  Suppose, by magic I make my server public and ask people to hit this api. What will happen, asa I get traffic my server will be down in very less amount of time.
  becoz the hardware is not a very chip commodity hardware, it's a user friednly personal computer it's not a commodity software/hardware on which I can run very high loads of request response.
   
  Here, you might be getting a persecption that only 1 thread is getting running, 1 thread is running, but 1 thread is running ur server but internally it can create multiple other threads to handle ur request. 
  Just like when we're solving the problem of factorial. What's happing in that?
  we were creating a main thread now internally from this main thread we're creating multiple threads like, thread0, thread1, ......uptil the number of elements we've.
  So, here also it creates many threads depending on what are the request are coming already. 
  
  public String sayHello(@RequestParam("n") String name){
	logger.info("Saying hello to {}", name);
	return "Hello" + name;
  }  


# logback file and how it's useful?

   logging is just to understand in a particular flow, our application did what, if it did correctly something then print that 
   if it did something wrong then print that also.    


   public String sayHello(@RequestParam("n") String name){
	  logger.info("Saying hello to {}", name);
	  
	  // some operation which can throw an error 
	  
	  try{
	      int a = 1/0;
		  this.logger.info("Response: {}", a);
	  }catch (Exception e){
		  this.logger.error("Error while doing the operation: {}", e);	
	  
	  }
	  
  }  


# If you have multiple functions and in that ur printing the same log statement but in different functions, in that case how you will recognize fromw which function are you getting this error.
So, how will you figure out? In that case you can you can write function
nction name in that log statement  


# Different types of technique for logging like kibana, elasticsearch, 

# slf4j

# Why logging levels were developed?
- There are 2 environments 
  - Production - Where the actual traffic will be coming( Customer request) 
  - Staging/Test/Preprod/development - Test your changes(backend as well as frontend,  end-to-end application)
    Zomato, Swiggy building new feature, and we can't directly push our changes on production level, before that we need to test it on our locals
  - 	
  
----------------------------------------------------------------------

You can have different-different configuration for multiple environment  
like,

File-1. application.properties

#logging.level.root=debug
spring.profiles.active=production,staging 

discount.percentage=10

File-2. application-production.properties 
File-3. application-staging.properties 

### How are we configuring above 2 file in application.properties ?
We're inheriting application.production.properties from application.properties 

How it's happening?
So, application.properties is a file which is understood by maven that it's a configuration file that you don't have to define it anywhere
When we talked abt different files staging, production anything so if you have that name "application" and after that you just gave ur profile name.
It would be understood as a configuration file. 
It will always execute from parent to child.
Not from child to parent.

 
-------------------------------------------------------------------------

rm -rf target 
remove recursive delete target file/folder

#### 1. Jave file run on our local 

"C:\Program Files\Java\jdk-19\bin\java.exe" "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2022.3.2\lib\idea_rt.jar=64460:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2022.3.2\bin" -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 -classpath "C:\Users\ASUS SSD\JAVA\A4. JAVA GFG\demo-spring-boot\demo-spring-boot\target\classes;C:\Users\ASUS SSD\.m2\repository\org\springframework\boot\spring-boot-starter-web\2.7.13\spring-boot-starter-web-2.7.13.jar;C:\Users\ASUS SSD\.m2\repository\org\springframework\boot\spring-boot-starter\3.2.4\spring-boot-starter-3.2.4.jar;C:\Users\ASUS SSD\.m2\repository\org\springframework\boot\spring-boot\3.2.4\spring-boot-3.2.4.jar;C:\Users\ASUS SSD\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.2.4\spring-boot-autoconfigure-3.2.4.jar;C:\Users\ASUS SSD\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.2.4\spring-boot-starter-logging-3.2.4.jar;C:\Users\ASUS SSD\.m2\repository\ch\qos\logback\logback-classic\1.4.14\logback-classic-1.4.14.jar;C:\Users\ASUS SSD\.m2\repository\ch\qos\logback\logback-core\1.4.14\logback-core-1.4.14.jar;C:\Users\ASUS SSD\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.21.1\log4j-to-slf4j-2.21.1.jar;C:\Users\ASUS SSD\.m2\repository\org\apache\logging\log4j\log4j-api\2.21.1\log4j-api-2.21.1.jar;C:\Users\ASUS SSD\.m2\repository\org\slf4j\jul-to-slf4j\2.0.12\jul-to-slf4j-2.0.12.jar;C:\Users\ASUS SSD\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\ASUS SSD\.m2\repository\org\yaml\snakeyaml\2.2\snakeyaml-2.2.jar;C:\Users\ASUS SSD\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.2.4\spring-boot-starter-json-3.2.4.jar;C:\Users\ASUS SSD\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.15.4\jackson-databind-2.15.4.jar;C:\Users\ASUS SSD\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.15.4\jackson-annotations-2.15.4.jar;C:\Users\ASUS SSD\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.15.4\jackson-core-2.15.4.jar;C:\Users\ASUS SSD\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.15.4\jackson-datatype-jdk8-2.15.4.jar;C:\Users\ASUS SSD\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.15.4\jackson-datatype-jsr310-2.15.4.jar;C:\Users\ASUS SSD\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.15.4\jackson-module-parameter-names-2.15.4.jar;C:\Users\ASUS SSD\.m2\repository\org\springframework\spring-web\6.1.5\spring-web-6.1.5.jar;C:\Users\ASUS SSD\.m2\repository\org\springframework\spring-beans\6.1.5\spring-beans-6.1.5.jar;C:\Users\ASUS SSD\.m2\repository\io\micrometer\micrometer-observation\1.12.4\micrometer-observation-1.12.4.jar;C:\Users\ASUS SSD\.m2\repository\io\micrometer\micrometer-commons\1.12.4\micrometer-commons-1.12.4.jar;C:\Users\ASUS SSD\.m2\repository\org\springframework\spring-webmvc\6.1.5\spring-webmvc-6.1.5.jar;C:\Users\ASUS SSD\.m2\repository\org\springframework\spring-aop\6.1.5\spring-aop-6.1.5.jar;C:\Users\ASUS SSD\.m2\repository\org\springframework\spring-context\6.1.5\spring-context-6.1.5.jar;C:\Users\ASUS SSD\.m2\repository\org\springframework\spring-expression\6.1.5\spring-expression-6.1.5.jar;C:\Users\ASUS SSD\.m2\repository\org\slf4j\slf4j-api\2.0.12\slf4j-api-2.0.12.jar;C:\Users\ASUS SSD\.m2\repository\org\springframework\spring-core\6.1.5\spring-core-6.1.5.jar;C:\Users\ASUS SSD\.m2\repository\org\springframework\spring-jcl\6.1.5\spring-jcl-6.1.5.jar" demospringboot.DemoSpringBootApplication

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.2.4)

2024-04-01T22:46:12.311+05:30  INFO 23108 --- [demo-spring-boot] [           main] d.DemoSpringBootApplication              : Starting DemoSpringBootApplication using Java 19.0.1 with PID 23108 (C:\Users\ASUS SSD\JAVA\A4. JAVA GFG\demo-spring-boot\demo-spring-boot\target\classes started by ASUS SSD in C:\Users\ASUS SSD\JAVA\A4. JAVA GFG\demo-spring-boot)
2024-04-01T22:46:12.317+05:30  INFO 23108 --- [demo-spring-boot] [           main] d.DemoSpringBootApplication              : No active profile set, falling back to 1 default profile: "default"
2024-04-01T22:46:15.191+05:30  INFO 23108 --- [demo-spring-boot] [           main] d.DemoSpringBootApplication              : Started DemoSpringBootApplication in 4.185 seconds (process running for 5.8)
2024-04-01T22:46:15.209+05:30 ERROR 23108 --- [demo-spring-boot] [           main] d.DemoSpringBootApplication              : Error log
2024-04-01T22:46:15.209+05:30  WARN 23108 --- [demo-spring-boot] [           main] d.DemoSpringBootApplication              : Warn log
2024-04-01T22:46:15.210+05:30  INFO 23108 --- [demo-spring-boot] [           main] d.DemoSpringBootApplication              : Info log

Process finished with exit code 0


#### 2. How to run jar file 

C:\Users\ASUS SSD\JAVA\A4. JAVA GFG\demo-spring-boot\demo-spring-boot>mvn clean package && java -jar target/demo-spring-boot-0.0.1-SNAPSHOT.jar

[INFO] Scanning for projects...
[INFO]
[INFO] --------------------< com.example:demo-spring-boot >--------------------
[INFO] Building demo-spring-boot 0.0.1-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- maven-clean-plugin:3.3.2:clean (default-clean) @ demo-spring-boot ---
[INFO] Deleting C:\Users\ASUS SSD\JAVA\A4. JAVA GFG\demo-spring-boot\demo-spring-boot\target
[INFO]
[INFO] --- maven-resources-plugin:3.3.1:resources (default-resources) @ demo-spring-boot ---
[INFO] Copying 1 resource from src\main\resources to target\classes
[INFO] Copying 0 resource from src\main\resources to target\classes
[INFO]
[INFO] --- maven-compiler-plugin:3.11.0:compile (default-compile) @ demo-spring-boot ---
[INFO] Changes detected - recompiling the module! :source
[INFO] Compiling 4 source files with javac [debug release 19] to target\classes
[INFO]
[INFO] --- maven-resources-plugin:3.3.1:testResources (default-testResources) @ demo-spring-boot ---
[INFO] skip non existing resourceDirectory C:\Users\ASUS SSD\JAVA\A4. JAVA GFG\demo-spring-boot\demo-spring-boot\src\test\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.11.0:testCompile (default-testCompile) @ demo-spring-boot ---
[INFO] Changes detected - recompiling the module! :dependency
[INFO] Compiling 1 source file with javac [debug release 19] to target\test-classes
[INFO]
[INFO] --- maven-surefire-plugin:3.1.2:test (default-test) @ demo-spring-boot ---
[INFO] Using auto detected provider org.apache.maven.surefire.junitplatform.JUnitPlatformProvider
[INFO]
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running demospringboot.DemoSpringBootApplicationTests
22:51:46.261 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [demospringboot.DemoSpringBootApplicationTests]: DemoSpringBootApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
22:51:46.760 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration demospringboot.DemoSpringBootApplication for test class demospringboot.DemoSpringBootApplicationTests

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.2.4)

2024-04-01T22:51:48.178+05:30  INFO 4156 --- [demo-spring-boot] [           main] d.DemoSpringBootApplicationTests         : Starting DemoSpringBootApplicationTests using Java 19.0.1 with PID 4156 (started by ASUS SSD in C:\Users\ASUS SSD\JAVA\A4. JAVA GFG\demo-spring-boot\demo-spring-boot)
2024-04-01T22:51:48.182+05:30  INFO 4156 --- [demo-spring-boot] [           main] d.DemoSpringBootApplicationTests         : No active profile set, falling back to 1 default profile: "default"
2024-04-01T22:51:50.908+05:30  INFO 4156 --- [demo-spring-boot] [           main] d.DemoSpringBootApplicationTests         : Started DemoSpringBootApplicationTests in 3.679 seconds (process running for 7.496)
Java HotSpot(TM) 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 10.17 s -- in demospringboot.DemoSpringBootApplicationTests
[INFO]
[INFO] Results:
[INFO]
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0
[INFO]
[INFO]
[INFO] --- maven-jar-plugin:3.3.0:jar (default-jar) @ demo-spring-boot ---
[INFO] Building jar: C:\Users\ASUS SSD\JAVA\A4. JAVA GFG\demo-spring-boot\demo-spring-boot\target\demo-spring-boot-0.0.1-SNAPSHOT.jar
[INFO]
[INFO] --- spring-boot-maven-plugin:3.2.4:repackage (repackage) @ demo-spring-boot ---
[INFO] Replacing main artifact C:\Users\ASUS SSD\JAVA\A4. JAVA GFG\demo-spring-boot\demo-spring-boot\target\demo-spring-boot-0.0.1-SNAPSHOT.jar with repackaged archive, adding nested dependencies in BOOT-INF/.
[INFO] The original artifact has been renamed to C:\Users\ASUS SSD\JAVA\A4. JAVA GFG\demo-spring-boot\demo-spring-boot\target\demo-spring-boot-0.0.1-SNAPSHOT.jar.original
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  23.286 s
[INFO] Finished at: 2024-04-01T22:51:58+05:30
[INFO] ------------------------------------------------------------------------

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.2.4)

2024-04-01T22:52:02.402+05:30  INFO 24968 --- [demo-spring-boot] [           main] d.DemoSpringBootApplication              : Starting DemoSpringBootApplication v0.0.1-SNAPSHOT using Java 19.0.1 with PID 24968 (C:\Users\ASUS SSD\JAVA\A4. JAVA GFG\demo-spring-boot\demo-spring-boot\target\demo-spring-boot-0.0.1-SNAPSHOT.jar started by ASUS SSD in C:\Users\ASUS SSD\JAVA\A4. JAVA GFG\demo-spring-boot\demo-spring-boot)
2024-04-01T22:52:02.439+05:30  INFO 24968 --- [demo-spring-boot] [           main] d.DemoSpringBootApplication              : No active profile set, falling back to 1 default profile: "default"
2024-04-01T22:52:04.501+05:30  INFO 24968 --- [demo-spring-boot] [           main] d.DemoSpringBootApplication              : Started DemoSpringBootApplication in 3.99 seconds (process running for 6.008)
2024-04-01T22:52:04.507+05:30 ERROR 24968 --- [demo-spring-boot] [           main] d.DemoSpringBootApplication              : Error log
2024-04-01T22:52:04.507+05:30  WARN 24968 --- [demo-spring-boot] [           main] d.DemoSpringBootApplication              : Warn log
2024-04-01T22:52:04.510+05:30  INFO 24968 --- [demo-spring-boot] [           main] d.DemoSpringBootApplication              : Info log


----------------------------------------------------------------------

#### 3. How to run jar file using profile

C:\Users\ASUS SSD\JAVA\A4. JAVA GFG\demo-spring-boot\demo-spring-boot>mvn clean package && java -Dspring.profiles.active=production -jar target/demo-spring-boot-0.0.1-SNAPSHOT.jar

2024-04-01T23:19:09.397+05:30  INFO 4156 --- [demo-spring-boot] [           main] d.DemoSpringBootApplication              : Starting DemoSpringBootApplication v0.0.1-SNAPSHOT using Java 19.0.1 with PID 4156 (C:\Users\ASUS SSD\JAVA\A4. JAVA GFG\demo-spring-boot\demo-spring-boot\target\demo-spring-boot-0.0.1-SNAPSHOT.jar started by ASUS SSD in C:\Users\ASUS SSD\JAVA\A4. JAVA GFG\demo-spring-boot\demo-spring-boot)
2024-04-01T23:19:09.409+05:30  INFO 4156 --- [demo-spring-boot] [           main] d.DemoSpringBootApplication              : The following 1 profile is active: "production"
2024-04-01T23:19:11.617+05:30  INFO 4156 --- [demo-spring-boot] [           main] d.DemoSpringBootApplication              : Started DemoSpringBootApplication in 3.784 seconds (process running for 5.541)
2024-04-01T23:19:11.636+05:30 ERROR 4156 --- [demo-spring-boot] [           main] d.DemoSpringBootApplication              : Error log
2024-04-01T23:19:11.638+05:30  WARN 4156 --- [demo-spring-boot] [           main] d.DemoSpringBootApplication              : Warn log
2024-04-01T23:19:11.638+05:30  INFO 4156 --- [demo-spring-boot] [           main] d.DemoSpringBootApplication              : Info log

-----------------------------------------------------------------------------




-----------------------------------------------------------------------------
### Dispatcher Servlet


notes making apps

